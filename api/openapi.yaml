openapi: 3.0.0
info:
  title: CTF Management API
  description: 'API for managing CTF (Capture The Flag) games, teams, users, and services.'
  contact: {}
  version: 1.1.0
servers:
  - url: 'https://ctf01d.ru'
    description: Production server
  - url: 'http://localhost:4102'
    description: Local server
tags:
  - name: Games
    description: >-
      Endpoints for managing CTF games, including creation, retrieval, updating,
      and deletion.
  - name: Results
    description: >-
      Endpoints for handling results of CTF games, including creating,
      retrieving, updating, and deleting game results.
  - name: Services
    description: >-
      Endpoints for managing services used in CTF games, such as creating,
      updating, retrieving, and deleting service information.
  - name: Sessions
    description: >-
      Endpoints for authentication and authorization, including login, logout,
      and session validation.
  - name: Teams
    description: >-
      Endpoints for managing teams, including creating, updating, retrieving,
      and deleting team information, and handling team membership.
  - name: University
    description: Endpoints for managing university information related to teams and users.
  - name: Users
    description: >-
      Endpoints for managing user information, including creating, updating,
      retrieving, and deleting user profiles, and handling authentication.
paths:
  /api/v1/auth/sign_in:
    post:
      tags:
        - Sessions
      summary: Sign in user
      description: >-
        Authenticates a user by user_name and password, starts a new session,
        and returns a session cookie.
      operationId: signInUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                  example: exampleUser
                password:
                  type: string
                  format: password
                  example: examplePass
      responses:
        '200':
          description: User logged in successfully. A session cookie is set.
          headers:
            Set-Cookie:
              description: >-
                Session cookie which needs to be included in subsequent
                requests.
              schema:
                type: string
                example: session_id=abc123; Path=/; Max-Age=345600; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: User logged in
        '400':
          description: Invalid request body
        '401':
          description: Invalid user_name or password
        '500':
          description: Internal Server Error
      parameters: []
  /api/v1/auth/sign_out:
    post:
      tags:
        - Sessions
      summary: Sign out user
      description: >-
        Authenticates a user by user_name and password, starts a new session,
        and returns a session cookie.
      operationId: signOutUser
      responses:
        '200':
          description: User logout successfully. A session cookie is remove.
          headers:
            Set-Cookie:
              description: >-
                Session cookie which needs to be included in subsequent
                requests.
              schema:
                type: string
                example: session_id=abc123; Path=/; Max-Age=345600; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: User logged out
        '400':
          description: Invalid request body
        '401':
          description: Invalid user_name or password
        '500':
          description: Internal Server Error
      parameters: []
  /api/v1/auth/session:
    get:
      summary: Validate current session and return user role
      description: Check if the current session is valid and return the user's role.
      operationId: validateSession
      tags:
        - Sessions
      responses:
        '200':
          description: Session validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
      parameters: []
  /api/v1/users:
    get:
      tags:
        - Users
      summary: List all users
      operationId: listUsers
      parameters: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
                x-content-type: application/json
        '500':
          description: Failed response
    post:
      tags:
        - Users
      summary: Create a new user
      operationId: createUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          description: Bad request
        '500':
          description: Failed response
      security:
        - SessionCookie: []
  '/api/v1/users/{userId}':
    get:
      tags:
        - Users
      summary: Get a user by ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      responses:
        '200':
          description: Detailed information of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request
        '500':
          description: Failed response
    put:
      tags:
        - Users
      summary: Update a user
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad request
        '500':
          description: Failed response
      security:
        - SessionCookie: []
    delete:
      tags:
        - Users
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      responses:
        '200':
          description: User deleted successfully
        '500':
          description: Failed response
          content:
            application/json:
              schema: {}
      security:
        - SessionCookie: []
  '/api/v1/users/{userId}/profile':
    get:
      tags:
        - Users
      summary: Get a profile by user ID
      operationId: getProfileById
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      responses:
        '200':
          description: Detailed information of a profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '400':
          description: Bad request
        '500':
          description: Failed response
  /api/v1/games:
    get:
      tags:
        - Games
      summary: List all games
      operationId: listGames
      parameters: []
      responses:
        '200':
          description: A list of games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameResponse'
                x-content-type: application/json
        '400':
          description: Bad request
    post:
      tags:
        - Games
      summary: Create a new game
      operationId: createGame
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameRequest'
        required: true
      responses:
        '200':
          description: Game created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateGameResponse'
        '400':
          description: Bad request
        '500':
          description: Failed response
      security:
        - SessionCookie: []
  '/api/v1/games/{gameId}':
    get:
      tags:
        - Games
      summary: Get a game by ID
      operationId: getGameById
      parameters:
        - name: gameId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      responses:
        '200':
          description: Detailed information of a game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponse'
        '400':
          description: Bad request
        '500':
          description: Failed response
    put:
      tags:
        - Games
      summary: Update a game
      operationId: updateGame
      parameters:
        - name: gameId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameRequest'
        required: true
      responses:
        '200':
          description: Game updated successfully
        '400':
          description: Failed request
          content:
            application/json:
              schema: {}
        '500':
          description: Failed response
          content:
            application/json:
              schema: {}
      security:
        - SessionCookie: []
    delete:
      tags:
        - Games
      summary: Delete a game
      operationId: deleteGame
      parameters:
        - name: gameId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      responses:
        '200':
          description: Game deleted successfully
        '400':
          description: Bad request
        '500':
          description: Failed response
      security:
        - SessionCookie: []
  /api/v1/teams:
    get:
      tags:
        - Teams
      summary: List all teams
      operationId: listTeams
      parameters: []
      responses:
        '200':
          description: A list of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamResponse'
                x-content-type: application/json
        '400':
          description: Failed request
          content:
            application/json:
              schema: {}
        '500':
          description: Failed response
          content:
            application/json:
              schema: {}
    post:
      tags:
        - Teams
      summary: Create a new team
      operationId: createTeam
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamRequest'
        required: true
      responses:
        '200':
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTeamResponse'
        '400':
          description: Failed request
          content:
            application/json:
              schema: {}
        '500':
          description: Failed response
          content:
            application/json:
              schema: {}
      security:
        - SessionCookie: []
  '/api/v1/teams/{teamId}':
    get:
      tags:
        - Teams
      summary: Get a team by ID
      operationId: getTeamById
      parameters:
        - name: teamId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      responses:
        '200':
          description: Detailed information of a team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamResponse'
    put:
      tags:
        - Teams
      summary: Update a team
      operationId: updateTeam
      parameters:
        - name: teamId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamRequest'
        required: true
      responses:
        '200':
          description: Team updated successfully
      security:
        - SessionCookie: []
    delete:
      tags:
        - Teams
      summary: Delete a team
      operationId: deleteTeam
      parameters:
        - name: teamId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      responses:
        '200':
          description: Team deleted successfully
      security:
        - SessionCookie: []
  '/api/v1/teams/{teamId}/members':
    get:
      tags:
        - Teams
      summary: Get all members of a team
      operationId: teamMembers
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of team members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '404':
          description: Team not found
  '/api/v1/teams/{teamId}/members/{userId}':
    post:
      tags:
        - Teams
      summary: Connect user with team
      operationId: connectUserTeam
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the team
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user
      responses:
        '200':
          description: Connect successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
      security:
        - SessionCookie: []
    put:
      tags:
        - Teams
      summary: Approve connected user with team lead
      operationId: approveUserTeam
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the team
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user
      responses:
        '200':
          description: Approve successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
      security:
        - SessionCookie: []
    delete:
      tags:
        - Teams
      summary: Leave user from team
      operationId: leaveUserFromTeam
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the team
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user
      responses:
        '200':
          description: Left successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
      security:
        - SessionCookie: []
  '/api/v1/games/{gameId}/results':
    post:
      tags:
        - Results
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
            format: uuid
      summary: Create a new game result
      operationId: createResult
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResultRequest'
        required: true
      responses:
        '200':
          description: Result created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResultResponse'
      security:
        - SessionCookie: []
  '/api/v1/games/{gameId}/results/{resultId}':
    get:
      tags:
        - Results
      summary: Get game result
      operationId: getResult
      parameters:
        - name: gameId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
        - name: resultId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      responses:
        '200':
          description: Detailed information of a result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultResponse'
    put:
      tags:
        - Results
      summary: Update a result
      operationId: updateResult
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
        - name: resultId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResultRequest'
        required: true
      responses:
        '200':
          description: Result updated successfully
      security:
        - SessionCookie: []
  '/api/v1/games/{gameId}/scoreboard':
    get:
      tags:
        - Results
      summary: Get game scoreboard
      operationId: getScoreboard
      parameters:
        - name: gameId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      responses:
        '200':
          description: Detailed information of a result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultResponse'
  /api/v1/services:
    get:
      tags:
        - Services
      summary: List all services
      operationId: listServices
      parameters: []
      responses:
        '200':
          description: A list of services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceResponse'
                x-content-type: application/json
    post:
      tags:
        - Services
      summary: Create a new service
      operationId: createService
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRequest'
        required: true
      responses:
        '200':
          description: Service created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateServiceResponse'
      security:
        - SessionCookie: []
  '/api/v1/services/{serviceId}':
    get:
      tags:
        - Services
      summary: Get a service by ID
      operationId: getServiceById
      parameters:
        - name: serviceId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      responses:
        '200':
          description: Detailed information of a service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
    put:
      tags:
        - Services
      summary: Update a service
      operationId: updateService
      parameters:
        - name: serviceId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRequest'
        required: true
      responses:
        '200':
          description: Service updated successfully
      security:
        - SessionCookie: []
    delete:
      tags:
        - Services
      summary: Delete a service
      operationId: deleteService
      parameters:
        - name: serviceId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      responses:
        '200':
          description: Service deleted successfully
      security:
        - SessionCookie: []
  '/api/v1/services/{serviceId}/checker':
    post:
      tags:
        - Services
      summary: Upload zip-archive
      description: |
        Handler for upload zip-archive with checker
      operationId: uploadChecker
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Success upload
          content:
            application/json: {}
      security:
        - SessionCookie: []
  '/api/v1/services/{serviceId}/service':
    post:
      summary: Upload zip service
      description: |
        Upload zip archive with service code images and etc...
      tags:
        - Services
      operationId: uploadService
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Success upload
          content:
            application/json: {}
      security:
        - SessionCookie: []
  /api/v1/universities:
    get:
      summary: Retrieves a list of universities
      description: >
        This endpoint retrieves universities. It can optionally filter
        universities that match a specific term.
      tags:
        - University
      operationId: listUniversities
      parameters:
        - in: query
          name: term
          schema:
            type: string
          description: Optional search term to filter universities by name.
          required: false
      responses:
        '200':
          description: A JSON array of universities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UniversitiesResponse'
  '/api/v1/avatar/{username}':
    get:
      tags:
        - Users
      summary: Get a unique avatar for the username
      operationId: uniqueAvatar
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
        - name: max
          in: query
          required: false
          schema:
            type: integer
        - name: blockSize
          in: query
          required: false
          schema:
            type: integer
        - name: steps
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Unique avatar image
          content:
            image/png:
              schema:
                type: string
                format: binary
components:
  schemas:
    UserRequest:
      type: object
      required:
        - user_name
        - role
        - status
        - password
      properties:
        display_name:
          type: string
          description: The name of the user
        user_name:
          type: string
          description: The login of the user
        role:
          type: string
          enum:
            - admin
            - player
            - guest
          example: player
          description: 'The role of the user (admin, player or guest)'
        avatar_url:
          type: string
          description: URL to the user's avatar
        status:
          type: string
          description: 'Status of the user (active, disabled)'
        password:
          type: string
          description: User password
        team_ids:
          type: array
          items:
            type: string
            format: uuid
            example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
            description: Unique identifier for the result entry
    CreateUserResponse:
      type: object
      required:
        - data
        - id
      properties:
        data:
          type: string
          example: User created successfully
        id:
          type: string
          format: uuid
          example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
    CreateTeamResponse:
      type: object
      required:
        - data
        - id
      properties:
        data:
          type: string
          example: Team created successfully
        id:
          type: string
          format: uuid
          example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
    CreateServiceResponse:
      type: object
      required:
        - data
        - id
      properties:
        data:
          type: string
          example: Service created successfully
        id:
          type: string
          format: uuid
          example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
    CreateGameResponse:
      type: object
      required:
        - data
        - id
      properties:
        data:
          type: string
          example: Game created successfully
        id:
          type: string
          format: uuid
          example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
    CreateResultResponse:
      type: object
      required:
        - data
        - id
      properties:
        data:
          type: string
          example: Result created successfully
        id:
          type: string
          format: uuid
          example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
    ProfileResponse:
      type: object
      description: >-
        The response schema for a user's profile, including id, timestamps, team
        name, and team history.
      required:
        - id
        - created_at
        - team_name
        - team_role
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the user.
        created_at:
          type: string
          format: date-time
          description: The timestamp when the user profile was created.
        updated_at:
          type: string
          format: date-time
          description: The timestamp when the user profile was last updated.
        team_name:
          type: string
          description: The current name of the user's team.
        team_role:
          type: string
          description: The current role of the user's team.
          enum:
            - owner
            - captain
            - vice-captain
            - player
            - guest
        team_history:
          type: array
          description: >-
            The list of teams the user has been part of, including the periods
            of membership.
          items:
            $ref: '#/components/schemas/TeamHistory'
    TeamHistory:
      required:
        - name
        - join
        - role
      type: object
      description: >-
        The schema for recording the history of teams a user has joined and
        left.
      properties:
        name:
          type: string
          description: The name of the team.
        role:
          type: string
          description: Role of the user's team.
          enum:
            - owner
            - captain
            - vice-captain
            - player
            - guest
        join:
          type: string
          format: date-time
          description: The timestamp when the user joined the team.
          example: '2024-01-23T04:56:07.000Z'
        left:
          type: string
          format: date-time
          description: The timestamp when the user left the team.
          example: '2024-01-23T04:56:07.000Z'
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the user
        display_name:
          type: string
          description: The name of the user
        user_name:
          type: string
          description: The login of the user
        role:
          type: string
          enum:
            - admin
            - player
            - guest
          example: player
          description: 'The role of the user (admin, player or guest)'
        avatar_url:
          type: string
          description: URL to the user's avatar
        status:
          type: string
          description: 'Status of the user (active, disabled)'
    GameRequest:
      required:
        - end_time
        - start_time
      type: object
      properties:
        start_time:
          type: string
          description: The start time of the game
          format: date-time
          example: '2024-01-23T04:56:07.000Z'
        end_time:
          type: string
          description: The end time of the game
          format: date-time
          example: '2024-01-24T04:56:07.000Z'
        description:
          type: string
          description: A brief description of the game
    GameResponse:
      required:
        - end_time
        - id
        - start_time
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the game
        start_time:
          type: string
          description: The start time of the game
          format: date-time
          example: '2024-01-23T04:56:07.000Z'
        end_time:
          type: string
          description: The end time of the game
          format: date-time
          example: '2024-01-24T04:56:07.000Z'
        description:
          type: string
          description: A brief description of the game
        teams:
          type: array
          items:
            $ref: '#/components/schemas/TeamResponse'
    ResultRequest:
      required:
        - rank
        - score
        - team_id
      type: object
      properties:
        team_id:
          type: string
          format: uuid
          description: Identifier of the team this result belongs to
        score:
          type: number
          format: double
          description: The score achieved by the team
        rank:
          type: integer
          description: The rank achieved by the team in this game
    ResultResponse:
      required:
        - id
        - game_id
        - rank
        - score
        - team_id
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the result entry
        team_id:
          type: string
          format: uuid
          description: Identifier of the team this result belongs to
        game_id:
          type: string
          format: uuid
          description: Identifier of the game this result is for
        score:
          type: number
          format: double
          description: The score achieved by the team
        rank:
          type: integer
          description: The rank achieved by the team in this game
    ServiceRequest:
      required:
        - author
        - is_public
        - name
      type: object
      properties:
        name:
          type: string
          description: Name of the service
        author:
          type: string
          description: Author of the service
        logo_url:
          type: string
          description: URL to the logo of the service
        description:
          type: string
          description: A brief description of the service
        is_public:
          type: boolean
          description: Boolean indicating if the service is public
    ServiceResponse:
      required:
        - author
        - id
        - is_public
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the service
        name:
          type: string
          description: Name of the service
        author:
          type: string
          description: Author of the service
        logo_url:
          type: string
          description: URL to the logo of the service
        description:
          type: string
          description: A brief description of the service
        is_public:
          type: boolean
          description: Boolean indicating if the service is public
    TeamRequest:
      required:
        - name
        - university_id
      type: object
      properties:
        name:
          type: string
          description: Name of the team
        description:
          type: string
          description: A brief description of the team
        university_id:
          type: string
          format: uuid
          description: University or institution the team is associated with
        social_links:
          type: string
          description: JSON string containing social media links of the team
        avatar_url:
          type: string
          description: URL to the team's avatar
    TeamResponse:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the team
        name:
          type: string
          description: Name of the team
        description:
          type: string
          description: A brief description of the team
        university:
          type: string
          description: University or institution the team is associated with
        social_links:
          type: string
          description: JSON string containing social media links of the team
        avatar_url:
          type: string
          description: URL to the team's avatar
    UniversityResponse:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the university
          example: 81e17cb6-5c46-4934-b6d5-5c8356712cb6
        name:
          type: string
          description: The name of the university
          example: Анапский филиал Кубанского государственного аграрного университета
    UniversitiesResponse:
      type: array
      items:
        $ref: '#/components/schemas/UniversityResponse'
    SessionResponse:
      type: object
      properties:
        role:
          type: string
          example: admin
          description: The role of the current user
          nullable: true
        name:
          type: string
          example: r00t
          description: The name of the current user
          nullable: true
        id:
          type: string
          example: a8a5d938-1bc7-4b69-942d-9c00fc166fb6
          format: uuid
  securitySchemes:
    SessionCookie:
      type: apiKey
      in: cookie
      name: session_id
  links: {}
  callbacks: {}
security: []
