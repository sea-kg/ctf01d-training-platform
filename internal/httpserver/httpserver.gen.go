// Package httpserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package httpserver

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	SessionCookieScopes = "SessionCookie.Scopes"
)

// Defines values for ProfileResponseTeamRole.
const (
	ProfileResponseTeamRoleCaptain     ProfileResponseTeamRole = "captain"
	ProfileResponseTeamRoleGuest       ProfileResponseTeamRole = "guest"
	ProfileResponseTeamRoleOwner       ProfileResponseTeamRole = "owner"
	ProfileResponseTeamRolePlayer      ProfileResponseTeamRole = "player"
	ProfileResponseTeamRoleViceCaptain ProfileResponseTeamRole = "vice-captain"
)

// Defines values for TeamHistoryRole.
const (
	TeamHistoryRoleCaptain     TeamHistoryRole = "captain"
	TeamHistoryRoleGuest       TeamHistoryRole = "guest"
	TeamHistoryRoleOwner       TeamHistoryRole = "owner"
	TeamHistoryRolePlayer      TeamHistoryRole = "player"
	TeamHistoryRoleViceCaptain TeamHistoryRole = "vice-captain"
)

// Defines values for UserRequestRole.
const (
	UserRequestRoleAdmin  UserRequestRole = "admin"
	UserRequestRoleGuest  UserRequestRole = "guest"
	UserRequestRolePlayer UserRequestRole = "player"
)

// Defines values for UserResponseRole.
const (
	UserResponseRoleAdmin  UserResponseRole = "admin"
	UserResponseRoleGuest  UserResponseRole = "guest"
	UserResponseRolePlayer UserResponseRole = "player"
)

// CreateGameResponse defines model for CreateGameResponse.
type CreateGameResponse struct {
	Data string             `json:"data"`
	Id   openapi_types.UUID `json:"id"`
}

// CreateResultResponse defines model for CreateResultResponse.
type CreateResultResponse struct {
	Data string             `json:"data"`
	Id   openapi_types.UUID `json:"id"`
}

// CreateServiceResponse defines model for CreateServiceResponse.
type CreateServiceResponse struct {
	Data string             `json:"data"`
	Id   openapi_types.UUID `json:"id"`
}

// CreateTeamResponse defines model for CreateTeamResponse.
type CreateTeamResponse struct {
	Data string             `json:"data"`
	Id   openapi_types.UUID `json:"id"`
}

// CreateUserResponse defines model for CreateUserResponse.
type CreateUserResponse struct {
	Data string             `json:"data"`
	Id   openapi_types.UUID `json:"id"`
}

// GameRequest defines model for GameRequest.
type GameRequest struct {
	// Description A brief description of the game
	Description *string `json:"description,omitempty"`

	// EndTime The end time of the game
	EndTime time.Time `json:"end_time"`

	// StartTime The start time of the game
	StartTime time.Time `json:"start_time"`
}

// GameResponse defines model for GameResponse.
type GameResponse struct {
	// Description A brief description of the game
	Description *string `json:"description,omitempty"`

	// EndTime The end time of the game
	EndTime time.Time `json:"end_time"`

	// Id Unique identifier for the game
	Id openapi_types.UUID `json:"id"`

	// StartTime The start time of the game
	StartTime time.Time       `json:"start_time"`
	Teams     *[]TeamResponse `json:"teams,omitempty"`
}

// ProfileResponse The response schema for a user's profile, including id, timestamps, team name, and team history.
type ProfileResponse struct {
	// CreatedAt The timestamp when the user profile was created.
	CreatedAt time.Time `json:"created_at"`

	// Id The unique identifier for the user.
	Id openapi_types.UUID `json:"id"`

	// TeamHistory The list of teams the user has been part of, including the periods of membership.
	TeamHistory *[]TeamHistory `json:"team_history,omitempty"`

	// TeamName The current name of the user's team.
	TeamName string `json:"team_name"`

	// TeamRole The current role of the user's team.
	TeamRole ProfileResponseTeamRole `json:"team_role"`

	// UpdatedAt The timestamp when the user profile was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// ProfileResponseTeamRole The current role of the user's team.
type ProfileResponseTeamRole string

// ResultRequest defines model for ResultRequest.
type ResultRequest struct {
	// Rank The rank achieved by the team in this game
	Rank int `json:"rank"`

	// Score The score achieved by the team
	Score float64 `json:"score"`

	// TeamId Identifier of the team this result belongs to
	TeamId openapi_types.UUID `json:"team_id"`
}

// ResultResponse defines model for ResultResponse.
type ResultResponse struct {
	// GameId Identifier of the game this result is for
	GameId openapi_types.UUID `json:"game_id"`

	// Id Unique identifier for the result entry
	Id openapi_types.UUID `json:"id"`

	// Rank The rank achieved by the team in this game
	Rank int `json:"rank"`

	// Score The score achieved by the team
	Score float64 `json:"score"`

	// TeamId Identifier of the team this result belongs to
	TeamId openapi_types.UUID `json:"team_id"`
}

// ServiceRequest defines model for ServiceRequest.
type ServiceRequest struct {
	// Author Author of the service
	Author string `json:"author"`

	// Description A brief description of the service
	Description *string `json:"description,omitempty"`

	// IsPublic Boolean indicating if the service is public
	IsPublic bool `json:"is_public"`

	// LogoUrl URL to the logo of the service
	LogoUrl *string `json:"logo_url,omitempty"`

	// Name Name of the service
	Name string `json:"name"`
}

// ServiceResponse defines model for ServiceResponse.
type ServiceResponse struct {
	// Author Author of the service
	Author string `json:"author"`

	// Description A brief description of the service
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the service
	Id openapi_types.UUID `json:"id"`

	// IsPublic Boolean indicating if the service is public
	IsPublic bool `json:"is_public"`

	// LogoUrl URL to the logo of the service
	LogoUrl *string `json:"logo_url,omitempty"`

	// Name Name of the service
	Name string `json:"name"`
}

// SessionResponse defines model for SessionResponse.
type SessionResponse struct {
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name The name of the current user
	Name *string `json:"name"`

	// Role The role of the current user
	Role *string `json:"role"`
}

// TeamHistory The schema for recording the history of teams a user has joined and left.
type TeamHistory struct {
	// Join The timestamp when the user joined the team.
	Join time.Time `json:"join"`

	// Left The timestamp when the user left the team.
	Left *time.Time `json:"left,omitempty"`

	// Name The name of the team.
	Name string `json:"name"`

	// Role Role of the user's team.
	Role TeamHistoryRole `json:"role"`
}

// TeamHistoryRole Role of the user's team.
type TeamHistoryRole string

// TeamRequest defines model for TeamRequest.
type TeamRequest struct {
	// AvatarUrl URL to the team's avatar
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// Description A brief description of the team
	Description *string `json:"description,omitempty"`

	// Name Name of the team
	Name string `json:"name"`

	// SocialLinks JSON string containing social media links of the team
	SocialLinks *string `json:"social_links,omitempty"`

	// UniversityId University or institution the team is associated with
	UniversityId openapi_types.UUID `json:"university_id"`
}

// TeamResponse defines model for TeamResponse.
type TeamResponse struct {
	// AvatarUrl URL to the team's avatar
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// Description A brief description of the team
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the team
	Id openapi_types.UUID `json:"id"`

	// Name Name of the team
	Name string `json:"name"`

	// SocialLinks JSON string containing social media links of the team
	SocialLinks *string `json:"social_links,omitempty"`

	// University University or institution the team is associated with
	University *string `json:"university,omitempty"`
}

// UniversitiesResponse defines model for UniversitiesResponse.
type UniversitiesResponse = []UniversityResponse

// UniversityResponse defines model for UniversityResponse.
type UniversityResponse struct {
	// Id The unique identifier of the university
	Id openapi_types.UUID `json:"id"`

	// Name The name of the university
	Name string `json:"name"`
}

// UserRequest defines model for UserRequest.
type UserRequest struct {
	// AvatarUrl URL to the user's avatar
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// DisplayName The name of the user
	DisplayName *string `json:"display_name,omitempty"`

	// Password User password
	Password string `json:"password"`

	// Role The role of the user (admin, player or guest)
	Role UserRequestRole `json:"role"`

	// Status Status of the user (active, disabled)
	Status  string                `json:"status"`
	TeamIds *[]openapi_types.UUID `json:"team_ids,omitempty"`

	// UserName The login of the user
	UserName string `json:"user_name"`
}

// UserRequestRole The role of the user (admin, player or guest)
type UserRequestRole string

// UserResponse defines model for UserResponse.
type UserResponse struct {
	// AvatarUrl URL to the user's avatar
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// DisplayName The name of the user
	DisplayName *string `json:"display_name,omitempty"`

	// Id The unique identifier for the user
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Role The role of the user (admin, player or guest)
	Role *UserResponseRole `json:"role,omitempty"`

	// Status Status of the user (active, disabled)
	Status *string `json:"status,omitempty"`

	// UserName The login of the user
	UserName *string `json:"user_name,omitempty"`
}

// UserResponseRole The role of the user (admin, player or guest)
type UserResponseRole string

// SignInUserJSONBody defines parameters for SignInUser.
type SignInUserJSONBody struct {
	Password *string `json:"password,omitempty"`
	UserName *string `json:"user_name,omitempty"`
}

// UniqueAvatarParams defines parameters for UniqueAvatar.
type UniqueAvatarParams struct {
	Max       *int `form:"max,omitempty" json:"max,omitempty"`
	BlockSize *int `form:"blockSize,omitempty" json:"blockSize,omitempty"`
	Steps     *int `form:"steps,omitempty" json:"steps,omitempty"`
}

// UploadCheckerMultipartBody defines parameters for UploadChecker.
type UploadCheckerMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// UploadServiceMultipartBody defines parameters for UploadService.
type UploadServiceMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// ListUniversitiesParams defines parameters for ListUniversities.
type ListUniversitiesParams struct {
	// Term Optional search term to filter universities by name.
	Term *string `form:"term,omitempty" json:"term,omitempty"`
}

// SignInUserJSONRequestBody defines body for SignInUser for application/json ContentType.
type SignInUserJSONRequestBody SignInUserJSONBody

// CreateGameJSONRequestBody defines body for CreateGame for application/json ContentType.
type CreateGameJSONRequestBody = GameRequest

// UpdateGameJSONRequestBody defines body for UpdateGame for application/json ContentType.
type UpdateGameJSONRequestBody = GameRequest

// CreateResultJSONRequestBody defines body for CreateResult for application/json ContentType.
type CreateResultJSONRequestBody = ResultRequest

// UpdateResultJSONRequestBody defines body for UpdateResult for application/json ContentType.
type UpdateResultJSONRequestBody = ResultRequest

// CreateServiceJSONRequestBody defines body for CreateService for application/json ContentType.
type CreateServiceJSONRequestBody = ServiceRequest

// UpdateServiceJSONRequestBody defines body for UpdateService for application/json ContentType.
type UpdateServiceJSONRequestBody = ServiceRequest

// UploadCheckerMultipartRequestBody defines body for UploadChecker for multipart/form-data ContentType.
type UploadCheckerMultipartRequestBody UploadCheckerMultipartBody

// UploadServiceMultipartRequestBody defines body for UploadService for multipart/form-data ContentType.
type UploadServiceMultipartRequestBody UploadServiceMultipartBody

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = TeamRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = TeamRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = UserRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Validate current session and return user role
	// (GET /api/v1/auth/session)
	ValidateSession(w http.ResponseWriter, r *http.Request)
	// Sign in user
	// (POST /api/v1/auth/sign_in)
	SignInUser(w http.ResponseWriter, r *http.Request)
	// Sign out user
	// (POST /api/v1/auth/sign_out)
	SignOutUser(w http.ResponseWriter, r *http.Request)
	// Get a unique avatar for the username
	// (GET /api/v1/avatar/{username})
	UniqueAvatar(w http.ResponseWriter, r *http.Request, username string, params UniqueAvatarParams)
	// List all games
	// (GET /api/v1/games)
	ListGames(w http.ResponseWriter, r *http.Request)
	// Create a new game
	// (POST /api/v1/games)
	CreateGame(w http.ResponseWriter, r *http.Request)
	// Delete a game
	// (DELETE /api/v1/games/{gameId})
	DeleteGame(w http.ResponseWriter, r *http.Request, gameId openapi_types.UUID)
	// Get a game by ID
	// (GET /api/v1/games/{gameId})
	GetGameById(w http.ResponseWriter, r *http.Request, gameId openapi_types.UUID)
	// Update a game
	// (PUT /api/v1/games/{gameId})
	UpdateGame(w http.ResponseWriter, r *http.Request, gameId openapi_types.UUID)
	// Create a new game result
	// (POST /api/v1/games/{gameId}/results)
	CreateResult(w http.ResponseWriter, r *http.Request, gameId openapi_types.UUID)
	// Get game result
	// (GET /api/v1/games/{gameId}/results/{resultId})
	GetResult(w http.ResponseWriter, r *http.Request, gameId openapi_types.UUID, resultId openapi_types.UUID)
	// Update a result
	// (PUT /api/v1/games/{gameId}/results/{resultId})
	UpdateResult(w http.ResponseWriter, r *http.Request, gameId openapi_types.UUID, resultId openapi_types.UUID)
	// Get game scoreboard
	// (GET /api/v1/games/{gameId}/scoreboard)
	GetScoreboard(w http.ResponseWriter, r *http.Request, gameId openapi_types.UUID)
	// List all services
	// (GET /api/v1/services)
	ListServices(w http.ResponseWriter, r *http.Request)
	// Create a new service
	// (POST /api/v1/services)
	CreateService(w http.ResponseWriter, r *http.Request)
	// Delete a service
	// (DELETE /api/v1/services/{serviceId})
	DeleteService(w http.ResponseWriter, r *http.Request, serviceId openapi_types.UUID)
	// Get a service by ID
	// (GET /api/v1/services/{serviceId})
	GetServiceById(w http.ResponseWriter, r *http.Request, serviceId openapi_types.UUID)
	// Update a service
	// (PUT /api/v1/services/{serviceId})
	UpdateService(w http.ResponseWriter, r *http.Request, serviceId openapi_types.UUID)
	// Upload zip-archive
	// (POST /api/v1/services/{serviceId}/checker)
	UploadChecker(w http.ResponseWriter, r *http.Request, serviceId openapi_types.UUID)
	// Upload zip service
	// (POST /api/v1/services/{serviceId}/service)
	UploadService(w http.ResponseWriter, r *http.Request, serviceId openapi_types.UUID)
	// List all teams
	// (GET /api/v1/teams)
	ListTeams(w http.ResponseWriter, r *http.Request)
	// Create a new team
	// (POST /api/v1/teams)
	CreateTeam(w http.ResponseWriter, r *http.Request)
	// Delete a team
	// (DELETE /api/v1/teams/{teamId})
	DeleteTeam(w http.ResponseWriter, r *http.Request, teamId openapi_types.UUID)
	// Get a team by ID
	// (GET /api/v1/teams/{teamId})
	GetTeamById(w http.ResponseWriter, r *http.Request, teamId openapi_types.UUID)
	// Update a team
	// (PUT /api/v1/teams/{teamId})
	UpdateTeam(w http.ResponseWriter, r *http.Request, teamId openapi_types.UUID)
	// Get all members of a team
	// (GET /api/v1/teams/{teamId}/members)
	TeamMembers(w http.ResponseWriter, r *http.Request, teamId openapi_types.UUID)
	// Leave user from team
	// (DELETE /api/v1/teams/{teamId}/members/{userId})
	LeaveUserFromTeam(w http.ResponseWriter, r *http.Request, teamId openapi_types.UUID, userId openapi_types.UUID)
	// Connect user with team
	// (POST /api/v1/teams/{teamId}/members/{userId})
	ConnectUserTeam(w http.ResponseWriter, r *http.Request, teamId openapi_types.UUID, userId openapi_types.UUID)
	// Approve connected user with team lead
	// (PUT /api/v1/teams/{teamId}/members/{userId})
	ApproveUserTeam(w http.ResponseWriter, r *http.Request, teamId openapi_types.UUID, userId openapi_types.UUID)
	// Retrieves a list of universities
	// (GET /api/v1/universities)
	ListUniversities(w http.ResponseWriter, r *http.Request, params ListUniversitiesParams)
	// List all users
	// (GET /api/v1/users)
	ListUsers(w http.ResponseWriter, r *http.Request)
	// Create a new user
	// (POST /api/v1/users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Delete a user
	// (DELETE /api/v1/users/{userId})
	DeleteUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Get a user by ID
	// (GET /api/v1/users/{userId})
	GetUserById(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Update a user
	// (PUT /api/v1/users/{userId})
	UpdateUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Get a profile by user ID
	// (GET /api/v1/users/{userId}/profile)
	GetProfileById(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Validate current session and return user role
// (GET /api/v1/auth/session)
func (_ Unimplemented) ValidateSession(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Sign in user
// (POST /api/v1/auth/sign_in)
func (_ Unimplemented) SignInUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Sign out user
// (POST /api/v1/auth/sign_out)
func (_ Unimplemented) SignOutUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a unique avatar for the username
// (GET /api/v1/avatar/{username})
func (_ Unimplemented) UniqueAvatar(w http.ResponseWriter, r *http.Request, username string, params UniqueAvatarParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all games
// (GET /api/v1/games)
func (_ Unimplemented) ListGames(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new game
// (POST /api/v1/games)
func (_ Unimplemented) CreateGame(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a game
// (DELETE /api/v1/games/{gameId})
func (_ Unimplemented) DeleteGame(w http.ResponseWriter, r *http.Request, gameId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a game by ID
// (GET /api/v1/games/{gameId})
func (_ Unimplemented) GetGameById(w http.ResponseWriter, r *http.Request, gameId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a game
// (PUT /api/v1/games/{gameId})
func (_ Unimplemented) UpdateGame(w http.ResponseWriter, r *http.Request, gameId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new game result
// (POST /api/v1/games/{gameId}/results)
func (_ Unimplemented) CreateResult(w http.ResponseWriter, r *http.Request, gameId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get game result
// (GET /api/v1/games/{gameId}/results/{resultId})
func (_ Unimplemented) GetResult(w http.ResponseWriter, r *http.Request, gameId openapi_types.UUID, resultId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a result
// (PUT /api/v1/games/{gameId}/results/{resultId})
func (_ Unimplemented) UpdateResult(w http.ResponseWriter, r *http.Request, gameId openapi_types.UUID, resultId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get game scoreboard
// (GET /api/v1/games/{gameId}/scoreboard)
func (_ Unimplemented) GetScoreboard(w http.ResponseWriter, r *http.Request, gameId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all services
// (GET /api/v1/services)
func (_ Unimplemented) ListServices(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new service
// (POST /api/v1/services)
func (_ Unimplemented) CreateService(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a service
// (DELETE /api/v1/services/{serviceId})
func (_ Unimplemented) DeleteService(w http.ResponseWriter, r *http.Request, serviceId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a service by ID
// (GET /api/v1/services/{serviceId})
func (_ Unimplemented) GetServiceById(w http.ResponseWriter, r *http.Request, serviceId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a service
// (PUT /api/v1/services/{serviceId})
func (_ Unimplemented) UpdateService(w http.ResponseWriter, r *http.Request, serviceId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload zip-archive
// (POST /api/v1/services/{serviceId}/checker)
func (_ Unimplemented) UploadChecker(w http.ResponseWriter, r *http.Request, serviceId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload zip service
// (POST /api/v1/services/{serviceId}/service)
func (_ Unimplemented) UploadService(w http.ResponseWriter, r *http.Request, serviceId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all teams
// (GET /api/v1/teams)
func (_ Unimplemented) ListTeams(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new team
// (POST /api/v1/teams)
func (_ Unimplemented) CreateTeam(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a team
// (DELETE /api/v1/teams/{teamId})
func (_ Unimplemented) DeleteTeam(w http.ResponseWriter, r *http.Request, teamId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a team by ID
// (GET /api/v1/teams/{teamId})
func (_ Unimplemented) GetTeamById(w http.ResponseWriter, r *http.Request, teamId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a team
// (PUT /api/v1/teams/{teamId})
func (_ Unimplemented) UpdateTeam(w http.ResponseWriter, r *http.Request, teamId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all members of a team
// (GET /api/v1/teams/{teamId}/members)
func (_ Unimplemented) TeamMembers(w http.ResponseWriter, r *http.Request, teamId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Leave user from team
// (DELETE /api/v1/teams/{teamId}/members/{userId})
func (_ Unimplemented) LeaveUserFromTeam(w http.ResponseWriter, r *http.Request, teamId openapi_types.UUID, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Connect user with team
// (POST /api/v1/teams/{teamId}/members/{userId})
func (_ Unimplemented) ConnectUserTeam(w http.ResponseWriter, r *http.Request, teamId openapi_types.UUID, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Approve connected user with team lead
// (PUT /api/v1/teams/{teamId}/members/{userId})
func (_ Unimplemented) ApproveUserTeam(w http.ResponseWriter, r *http.Request, teamId openapi_types.UUID, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieves a list of universities
// (GET /api/v1/universities)
func (_ Unimplemented) ListUniversities(w http.ResponseWriter, r *http.Request, params ListUniversitiesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all users
// (GET /api/v1/users)
func (_ Unimplemented) ListUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new user
// (POST /api/v1/users)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a user
// (DELETE /api/v1/users/{userId})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a user by ID
// (GET /api/v1/users/{userId})
func (_ Unimplemented) GetUserById(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a user
// (PUT /api/v1/users/{userId})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a profile by user ID
// (GET /api/v1/users/{userId}/profile)
func (_ Unimplemented) GetProfileById(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ValidateSession operation middleware
func (siw *ServerInterfaceWrapper) ValidateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidateSession(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SignInUser operation middleware
func (siw *ServerInterfaceWrapper) SignInUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SignInUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SignOutUser operation middleware
func (siw *ServerInterfaceWrapper) SignOutUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SignOutUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UniqueAvatar operation middleware
func (siw *ServerInterfaceWrapper) UniqueAvatar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", chi.URLParam(r, "username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UniqueAvatarParams

	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", r.URL.Query(), &params.Max)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "max", Err: err})
		return
	}

	// ------------- Optional query parameter "blockSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockSize", r.URL.Query(), &params.BlockSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "blockSize", Err: err})
		return
	}

	// ------------- Optional query parameter "steps" -------------

	err = runtime.BindQueryParameter("form", true, false, "steps", r.URL.Query(), &params.Steps)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "steps", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UniqueAvatar(w, r, username, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGames operation middleware
func (siw *ServerInterfaceWrapper) ListGames(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGames(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateGame operation middleware
func (siw *ServerInterfaceWrapper) CreateGame(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGame(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteGame operation middleware
func (siw *ServerInterfaceWrapper) DeleteGame(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", chi.URLParam(r, "gameId"), &gameId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "gameId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGame(w, r, gameId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGameById operation middleware
func (siw *ServerInterfaceWrapper) GetGameById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", chi.URLParam(r, "gameId"), &gameId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "gameId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGameById(w, r, gameId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateGame operation middleware
func (siw *ServerInterfaceWrapper) UpdateGame(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", chi.URLParam(r, "gameId"), &gameId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "gameId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateGame(w, r, gameId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateResult operation middleware
func (siw *ServerInterfaceWrapper) CreateResult(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", chi.URLParam(r, "gameId"), &gameId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "gameId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateResult(w, r, gameId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetResult operation middleware
func (siw *ServerInterfaceWrapper) GetResult(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", chi.URLParam(r, "gameId"), &gameId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "gameId", Err: err})
		return
	}

	// ------------- Path parameter "resultId" -------------
	var resultId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "resultId", chi.URLParam(r, "resultId"), &resultId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resultId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResult(w, r, gameId, resultId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateResult operation middleware
func (siw *ServerInterfaceWrapper) UpdateResult(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", chi.URLParam(r, "gameId"), &gameId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "gameId", Err: err})
		return
	}

	// ------------- Path parameter "resultId" -------------
	var resultId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "resultId", chi.URLParam(r, "resultId"), &resultId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resultId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateResult(w, r, gameId, resultId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetScoreboard operation middleware
func (siw *ServerInterfaceWrapper) GetScoreboard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", chi.URLParam(r, "gameId"), &gameId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "gameId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScoreboard(w, r, gameId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListServices operation middleware
func (siw *ServerInterfaceWrapper) ListServices(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListServices(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateService operation middleware
func (siw *ServerInterfaceWrapper) CreateService(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateService(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteService operation middleware
func (siw *ServerInterfaceWrapper) DeleteService(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "serviceId" -------------
	var serviceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "serviceId", chi.URLParam(r, "serviceId"), &serviceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "serviceId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteService(w, r, serviceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetServiceById operation middleware
func (siw *ServerInterfaceWrapper) GetServiceById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "serviceId" -------------
	var serviceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "serviceId", chi.URLParam(r, "serviceId"), &serviceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "serviceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetServiceById(w, r, serviceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateService operation middleware
func (siw *ServerInterfaceWrapper) UpdateService(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "serviceId" -------------
	var serviceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "serviceId", chi.URLParam(r, "serviceId"), &serviceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "serviceId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateService(w, r, serviceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UploadChecker operation middleware
func (siw *ServerInterfaceWrapper) UploadChecker(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "serviceId" -------------
	var serviceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "serviceId", chi.URLParam(r, "serviceId"), &serviceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "serviceId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadChecker(w, r, serviceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UploadService operation middleware
func (siw *ServerInterfaceWrapper) UploadService(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "serviceId" -------------
	var serviceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "serviceId", chi.URLParam(r, "serviceId"), &serviceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "serviceId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadService(w, r, serviceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTeams operation middleware
func (siw *ServerInterfaceWrapper) ListTeams(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTeams(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTeam operation middleware
func (siw *ServerInterfaceWrapper) CreateTeam(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTeam(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTeam operation middleware
func (siw *ServerInterfaceWrapper) DeleteTeam(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", chi.URLParam(r, "teamId"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTeam(w, r, teamId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTeamById operation middleware
func (siw *ServerInterfaceWrapper) GetTeamById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", chi.URLParam(r, "teamId"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTeamById(w, r, teamId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTeam operation middleware
func (siw *ServerInterfaceWrapper) UpdateTeam(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", chi.URLParam(r, "teamId"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTeam(w, r, teamId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TeamMembers operation middleware
func (siw *ServerInterfaceWrapper) TeamMembers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", chi.URLParam(r, "teamId"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TeamMembers(w, r, teamId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LeaveUserFromTeam operation middleware
func (siw *ServerInterfaceWrapper) LeaveUserFromTeam(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", chi.URLParam(r, "teamId"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamId", Err: err})
		return
	}

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LeaveUserFromTeam(w, r, teamId, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ConnectUserTeam operation middleware
func (siw *ServerInterfaceWrapper) ConnectUserTeam(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", chi.URLParam(r, "teamId"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamId", Err: err})
		return
	}

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConnectUserTeam(w, r, teamId, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ApproveUserTeam operation middleware
func (siw *ServerInterfaceWrapper) ApproveUserTeam(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", chi.URLParam(r, "teamId"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamId", Err: err})
		return
	}

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ApproveUserTeam(w, r, teamId, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListUniversities operation middleware
func (siw *ServerInterfaceWrapper) ListUniversities(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUniversitiesParams

	// ------------- Optional query parameter "term" -------------

	err = runtime.BindQueryParameter("form", true, false, "term", r.URL.Query(), &params.Term)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "term", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUniversities(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProfileById operation middleware
func (siw *ServerInterfaceWrapper) GetProfileById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProfileById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/auth/session", wrapper.ValidateSession)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/auth/sign_in", wrapper.SignInUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/auth/sign_out", wrapper.SignOutUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/avatar/{username}", wrapper.UniqueAvatar)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/games", wrapper.ListGames)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/games", wrapper.CreateGame)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/games/{gameId}", wrapper.DeleteGame)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/games/{gameId}", wrapper.GetGameById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/games/{gameId}", wrapper.UpdateGame)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/games/{gameId}/results", wrapper.CreateResult)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/games/{gameId}/results/{resultId}", wrapper.GetResult)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/games/{gameId}/results/{resultId}", wrapper.UpdateResult)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/games/{gameId}/scoreboard", wrapper.GetScoreboard)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/services", wrapper.ListServices)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/services", wrapper.CreateService)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/services/{serviceId}", wrapper.DeleteService)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/services/{serviceId}", wrapper.GetServiceById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/services/{serviceId}", wrapper.UpdateService)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/services/{serviceId}/checker", wrapper.UploadChecker)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/services/{serviceId}/service", wrapper.UploadService)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/teams", wrapper.ListTeams)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/teams", wrapper.CreateTeam)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/teams/{teamId}", wrapper.DeleteTeam)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/teams/{teamId}", wrapper.GetTeamById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/teams/{teamId}", wrapper.UpdateTeam)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/teams/{teamId}/members", wrapper.TeamMembers)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/teams/{teamId}/members/{userId}", wrapper.LeaveUserFromTeam)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/teams/{teamId}/members/{userId}", wrapper.ConnectUserTeam)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/teams/{teamId}/members/{userId}", wrapper.ApproveUserTeam)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/universities", wrapper.ListUniversities)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users", wrapper.ListUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/users/{userId}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{userId}", wrapper.GetUserById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/users/{userId}", wrapper.UpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{userId}/profile", wrapper.GetProfileById)
	})

	return r
}
