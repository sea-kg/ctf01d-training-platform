// Package httpserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package httpserver

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ProfileResponseTeamRole.
const (
	ProfileResponseTeamRoleCaptain     ProfileResponseTeamRole = "captain"
	ProfileResponseTeamRoleGuest       ProfileResponseTeamRole = "guest"
	ProfileResponseTeamRoleOwner       ProfileResponseTeamRole = "owner"
	ProfileResponseTeamRolePlayer      ProfileResponseTeamRole = "player"
	ProfileResponseTeamRoleViceCaptain ProfileResponseTeamRole = "vice-captain"
)

// Defines values for TeamHistoryRole.
const (
	TeamHistoryRoleCaptain     TeamHistoryRole = "captain"
	TeamHistoryRoleGuest       TeamHistoryRole = "guest"
	TeamHistoryRoleOwner       TeamHistoryRole = "owner"
	TeamHistoryRolePlayer      TeamHistoryRole = "player"
	TeamHistoryRoleViceCaptain TeamHistoryRole = "vice-captain"
)

// Defines values for UserRequestRole.
const (
	UserRequestRoleAdmin  UserRequestRole = "admin"
	UserRequestRoleGuest  UserRequestRole = "guest"
	UserRequestRolePlayer UserRequestRole = "player"
)

// Defines values for UserResponseRole.
const (
	UserResponseRoleAdmin  UserResponseRole = "admin"
	UserResponseRoleGuest  UserResponseRole = "guest"
	UserResponseRolePlayer UserResponseRole = "player"
)

// CreateGameResponse defines model for CreateGameResponse.
type CreateGameResponse struct {
	Data string             `json:"data"`
	Id   openapi_types.UUID `json:"id"`
}

// CreateResultResponse defines model for CreateResultResponse.
type CreateResultResponse struct {
	Data string             `json:"data"`
	Id   openapi_types.UUID `json:"id"`
}

// CreateServiceResponse defines model for CreateServiceResponse.
type CreateServiceResponse struct {
	Data string             `json:"data"`
	Id   openapi_types.UUID `json:"id"`
}

// CreateTeamResponse defines model for CreateTeamResponse.
type CreateTeamResponse struct {
	Data string             `json:"data"`
	Id   openapi_types.UUID `json:"id"`
}

// CreateUserResponse defines model for CreateUserResponse.
type CreateUserResponse struct {
	Data string             `json:"data"`
	Id   openapi_types.UUID `json:"id"`
}

// GameRequest defines model for GameRequest.
type GameRequest struct {
	// Description A brief description of the game
	Description *string `json:"description,omitempty"`

	// EndTime The end time of the game
	EndTime time.Time `json:"end_time"`

	// StartTime The start time of the game
	StartTime time.Time `json:"start_time"`
}

// GameResponse defines model for GameResponse.
type GameResponse struct {
	// Description A brief description of the game
	Description *string `json:"description,omitempty"`

	// EndTime The end time of the game
	EndTime time.Time `json:"end_time"`

	// Id Unique identifier for the game
	Id openapi_types.UUID `json:"id"`

	// StartTime The start time of the game
	StartTime time.Time       `json:"start_time"`
	Teams     *[]TeamResponse `json:"teams,omitempty"`
}

// ProfileResponse The response schema for a user's profile, including id, timestamps, team name, and team history.
type ProfileResponse struct {
	// CreatedAt The timestamp when the user profile was created.
	CreatedAt time.Time `json:"created_at"`

	// Id The unique identifier for the user.
	Id openapi_types.UUID `json:"id"`

	// TeamHistory The list of teams the user has been part of, including the periods of membership.
	TeamHistory *[]TeamHistory `json:"team_history,omitempty"`

	// TeamName The current name of the user's team.
	TeamName string `json:"team_name"`

	// TeamRole The current role of the user's team.
	TeamRole ProfileResponseTeamRole `json:"team_role"`

	// UpdatedAt The timestamp when the user profile was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// ProfileResponseTeamRole The current role of the user's team.
type ProfileResponseTeamRole string

// ResultRequest defines model for ResultRequest.
type ResultRequest struct {
	// Rank The rank achieved by the team in this game
	Rank int `json:"rank"`

	// Score The score achieved by the team
	Score float64 `json:"score"`

	// TeamId Identifier of the team this result belongs to
	TeamId openapi_types.UUID `json:"team_id"`
}

// ResultResponse defines model for ResultResponse.
type ResultResponse struct {
	// GameId Identifier of the game this result is for
	GameId openapi_types.UUID `json:"game_id"`

	// Id Unique identifier for the result entry
	Id openapi_types.UUID `json:"id"`

	// Rank The rank achieved by the team in this game
	Rank int `json:"rank"`

	// Score The score achieved by the team
	Score float64 `json:"score"`

	// TeamId Identifier of the team this result belongs to
	TeamId openapi_types.UUID `json:"team_id"`
}

// ServiceRequest defines model for ServiceRequest.
type ServiceRequest struct {
	// Author Author of the service
	Author string `json:"author"`

	// Description A brief description of the service
	Description *string `json:"description,omitempty"`

	// IsPublic Boolean indicating if the service is public
	IsPublic bool `json:"is_public"`

	// LogoUrl URL to the logo of the service
	LogoUrl *string `json:"logo_url,omitempty"`

	// Name Name of the service
	Name string `json:"name"`
}

// ServiceResponse defines model for ServiceResponse.
type ServiceResponse struct {
	// Author Author of the service
	Author string `json:"author"`

	// Description A brief description of the service
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the service
	Id openapi_types.UUID `json:"id"`

	// IsPublic Boolean indicating if the service is public
	IsPublic bool `json:"is_public"`

	// LogoUrl URL to the logo of the service
	LogoUrl *string `json:"logo_url,omitempty"`

	// Name Name of the service
	Name string `json:"name"`
}

// SessionResponse defines model for SessionResponse.
type SessionResponse struct {
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name The name of the current user
	Name *string `json:"name"`

	// Role The role of the current user
	Role *string `json:"role"`
}

// TeamHistory The schema for recording the history of teams a user has joined and left.
type TeamHistory struct {
	// Join The timestamp when the user joined the team.
	Join time.Time `json:"join"`

	// Left The timestamp when the user left the team.
	Left *time.Time `json:"left,omitempty"`

	// Name The name of the team.
	Name string `json:"name"`

	// Role Role of the user's team.
	Role TeamHistoryRole `json:"role"`
}

// TeamHistoryRole Role of the user's team.
type TeamHistoryRole string

// TeamRequest defines model for TeamRequest.
type TeamRequest struct {
	// AvatarUrl URL to the team's avatar
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// Description A brief description of the team
	Description *string `json:"description,omitempty"`

	// Name Name of the team
	Name string `json:"name"`

	// SocialLinks JSON string containing social media links of the team
	SocialLinks *string `json:"social_links,omitempty"`

	// UniversityId University or institution the team is associated with
	UniversityId openapi_types.UUID `json:"university_id"`
}

// TeamResponse defines model for TeamResponse.
type TeamResponse struct {
	// AvatarUrl URL to the team's avatar
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// Description A brief description of the team
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the team
	Id openapi_types.UUID `json:"id"`

	// Name Name of the team
	Name string `json:"name"`

	// SocialLinks JSON string containing social media links of the team
	SocialLinks *string `json:"social_links,omitempty"`

	// University University or institution the team is associated with
	University *string `json:"university,omitempty"`
}

// UniversitiesResponse defines model for UniversitiesResponse.
type UniversitiesResponse = []UniversityResponse

// UniversityResponse defines model for UniversityResponse.
type UniversityResponse struct {
	// Id The unique identifier of the university
	Id openapi_types.UUID `json:"id"`

	// Name The name of the university
	Name string `json:"name"`
}

// UserRequest defines model for UserRequest.
type UserRequest struct {
	// AvatarUrl URL to the user's avatar
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// DisplayName The name of the user
	DisplayName *string `json:"display_name,omitempty"`

	// Password User password
	Password string `json:"password"`

	// Role The role of the user (admin, player or guest)
	Role UserRequestRole `json:"role"`

	// Status Status of the user (active, disabled)
	Status  string                `json:"status"`
	TeamIds *[]openapi_types.UUID `json:"team_ids,omitempty"`

	// UserName The login of the user
	UserName string `json:"user_name"`
}

// UserRequestRole The role of the user (admin, player or guest)
type UserRequestRole string

// UserResponse defines model for UserResponse.
type UserResponse struct {
	// AvatarUrl URL to the user's avatar
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// DisplayName The name of the user
	DisplayName *string `json:"display_name,omitempty"`

	// Id The unique identifier for the user
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Role The role of the user (admin, player or guest)
	Role *UserResponseRole `json:"role,omitempty"`

	// Status Status of the user (active, disabled)
	Status *string `json:"status,omitempty"`

	// UserName The login of the user
	UserName *string `json:"user_name,omitempty"`
}

// UserResponseRole The role of the user (admin, player or guest)
type UserResponseRole string

// SignInUserJSONBody defines parameters for SignInUser.
type SignInUserJSONBody struct {
	Password *string `json:"password,omitempty"`
	UserName *string `json:"user_name,omitempty"`
}

// UniqueAvatarParams defines parameters for UniqueAvatar.
type UniqueAvatarParams struct {
	Max       *int `form:"max,omitempty" json:"max,omitempty"`
	BlockSize *int `form:"blockSize,omitempty" json:"blockSize,omitempty"`
	Steps     *int `form:"steps,omitempty" json:"steps,omitempty"`
}

// UploadCheckerMultipartBody defines parameters for UploadChecker.
type UploadCheckerMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// UploadServiceMultipartBody defines parameters for UploadService.
type UploadServiceMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// ListUniversitiesParams defines parameters for ListUniversities.
type ListUniversitiesParams struct {
	// Term Optional search term to filter universities by name.
	Term *string `form:"term,omitempty" json:"term,omitempty"`
}

// SignInUserJSONRequestBody defines body for SignInUser for application/json ContentType.
type SignInUserJSONRequestBody SignInUserJSONBody

// CreateGameJSONRequestBody defines body for CreateGame for application/json ContentType.
type CreateGameJSONRequestBody = GameRequest

// UpdateGameJSONRequestBody defines body for UpdateGame for application/json ContentType.
type UpdateGameJSONRequestBody = GameRequest

// CreateResultJSONRequestBody defines body for CreateResult for application/json ContentType.
type CreateResultJSONRequestBody = ResultRequest

// UpdateResultJSONRequestBody defines body for UpdateResult for application/json ContentType.
type UpdateResultJSONRequestBody = ResultRequest

// CreateServiceJSONRequestBody defines body for CreateService for application/json ContentType.
type CreateServiceJSONRequestBody = ServiceRequest

// UpdateServiceJSONRequestBody defines body for UpdateService for application/json ContentType.
type UpdateServiceJSONRequestBody = ServiceRequest

// UploadCheckerMultipartRequestBody defines body for UploadChecker for multipart/form-data ContentType.
type UploadCheckerMultipartRequestBody UploadCheckerMultipartBody

// UploadServiceMultipartRequestBody defines body for UploadService for multipart/form-data ContentType.
type UploadServiceMultipartRequestBody UploadServiceMultipartBody

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = TeamRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = TeamRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = UserRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Validate current session and return user role
	// (GET /api/v1/auth/session)
	ValidateSession(c *gin.Context)
	// Sign in user
	// (POST /api/v1/auth/sign_in)
	SignInUser(c *gin.Context)
	// Sign out user
	// (POST /api/v1/auth/sign_out)
	SignOutUser(c *gin.Context)
	// Get a unique avatar for the username
	// (GET /api/v1/avatar/{username})
	UniqueAvatar(c *gin.Context, username string, params UniqueAvatarParams)
	// List all games
	// (GET /api/v1/games)
	ListGames(c *gin.Context)
	// Create a new game
	// (POST /api/v1/games)
	CreateGame(c *gin.Context)
	// Delete a game
	// (DELETE /api/v1/games/{gameId})
	DeleteGame(c *gin.Context, gameId openapi_types.UUID)
	// Get a game by ID
	// (GET /api/v1/games/{gameId})
	GetGameById(c *gin.Context, gameId openapi_types.UUID)
	// Update a game
	// (PUT /api/v1/games/{gameId})
	UpdateGame(c *gin.Context, gameId openapi_types.UUID)
	// Create a new game result
	// (POST /api/v1/games/{gameId}/results)
	CreateResult(c *gin.Context, gameId openapi_types.UUID)
	// Get game result
	// (GET /api/v1/games/{gameId}/results/{resultId})
	GetResult(c *gin.Context, gameId openapi_types.UUID, resultId openapi_types.UUID)
	// Update a result
	// (PUT /api/v1/games/{gameId}/results/{resultId})
	UpdateResult(c *gin.Context, gameId openapi_types.UUID, resultId openapi_types.UUID)
	// Get game scoreboard
	// (GET /api/v1/games/{gameId}/scoreboard)
	GetScoreboard(c *gin.Context, gameId openapi_types.UUID)
	// List all services
	// (GET /api/v1/services)
	ListServices(c *gin.Context)
	// Create a new service
	// (POST /api/v1/services)
	CreateService(c *gin.Context)
	// Delete a service
	// (DELETE /api/v1/services/{serviceId})
	DeleteService(c *gin.Context, serviceId openapi_types.UUID)
	// Get a service by ID
	// (GET /api/v1/services/{serviceId})
	GetServiceById(c *gin.Context, serviceId openapi_types.UUID)
	// Update a service
	// (PUT /api/v1/services/{serviceId})
	UpdateService(c *gin.Context, serviceId openapi_types.UUID)
	// Upload zip-archive
	// (POST /api/v1/services/{serviceId}/checker)
	UploadChecker(c *gin.Context, serviceId openapi_types.UUID)
	// Upload zip service
	// (POST /api/v1/services/{serviceId}/service)
	UploadService(c *gin.Context, serviceId openapi_types.UUID)
	// List all teams
	// (GET /api/v1/teams)
	ListTeams(c *gin.Context)
	// Create a new team
	// (POST /api/v1/teams)
	CreateTeam(c *gin.Context)
	// Delete a team
	// (DELETE /api/v1/teams/{teamId})
	DeleteTeam(c *gin.Context, teamId openapi_types.UUID)
	// Get a team by ID
	// (GET /api/v1/teams/{teamId})
	GetTeamById(c *gin.Context, teamId openapi_types.UUID)
	// Update a team
	// (PUT /api/v1/teams/{teamId})
	UpdateTeam(c *gin.Context, teamId openapi_types.UUID)
	// Get all members of a team
	// (GET /api/v1/teams/{teamId}/members)
	TeamMembers(c *gin.Context, teamId openapi_types.UUID)
	// Leave user from team
	// (DELETE /api/v1/teams/{teamId}/members/{userId})
	LeaveUserFromTeam(c *gin.Context, teamId openapi_types.UUID, userId openapi_types.UUID)
	// Connect user with team
	// (POST /api/v1/teams/{teamId}/members/{userId})
	ConnectUserTeam(c *gin.Context, teamId openapi_types.UUID, userId openapi_types.UUID)
	// Approve connected user with team lead
	// (PUT /api/v1/teams/{teamId}/members/{userId})
	ApproveUserTeam(c *gin.Context, teamId openapi_types.UUID, userId openapi_types.UUID)
	// Retrieves a list of universities
	// (GET /api/v1/universities)
	ListUniversities(c *gin.Context, params ListUniversitiesParams)
	// List all users
	// (GET /api/v1/users)
	ListUsers(c *gin.Context)
	// Create a new user
	// (POST /api/v1/users)
	CreateUser(c *gin.Context)
	// Delete a user
	// (DELETE /api/v1/users/{userId})
	DeleteUser(c *gin.Context, userId openapi_types.UUID)
	// Get a user by ID
	// (GET /api/v1/users/{userId})
	GetUserById(c *gin.Context, userId openapi_types.UUID)
	// Update a user
	// (PUT /api/v1/users/{userId})
	UpdateUser(c *gin.Context, userId openapi_types.UUID)
	// Get a profile by user ID
	// (GET /api/v1/users/{userId}/profile)
	GetProfileById(c *gin.Context, userId openapi_types.UUID)
	// Getting service version
	// (GET /api/version)
	GetVersion(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ValidateSession operation middleware
func (siw *ServerInterfaceWrapper) ValidateSession(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ValidateSession(c)
}

// SignInUser operation middleware
func (siw *ServerInterfaceWrapper) SignInUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInUser(c)
}

// SignOutUser operation middleware
func (siw *ServerInterfaceWrapper) SignOutUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignOutUser(c)
}

// UniqueAvatar operation middleware
func (siw *ServerInterfaceWrapper) UniqueAvatar(c *gin.Context) {

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", c.Param("username"), &username, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UniqueAvatarParams

	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", c.Request.URL.Query(), &params.Max)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter max: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "blockSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockSize", c.Request.URL.Query(), &params.BlockSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter blockSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "steps" -------------

	err = runtime.BindQueryParameter("form", true, false, "steps", c.Request.URL.Query(), &params.Steps)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter steps: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UniqueAvatar(c, username, params)
}

// ListGames operation middleware
func (siw *ServerInterfaceWrapper) ListGames(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGames(c)
}

// CreateGame operation middleware
func (siw *ServerInterfaceWrapper) CreateGame(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateGame(c)
}

// DeleteGame operation middleware
func (siw *ServerInterfaceWrapper) DeleteGame(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGame(c, gameId)
}

// GetGameById operation middleware
func (siw *ServerInterfaceWrapper) GetGameById(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGameById(c, gameId)
}

// UpdateGame operation middleware
func (siw *ServerInterfaceWrapper) UpdateGame(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateGame(c, gameId)
}

// CreateResult operation middleware
func (siw *ServerInterfaceWrapper) CreateResult(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateResult(c, gameId)
}

// GetResult operation middleware
func (siw *ServerInterfaceWrapper) GetResult(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "resultId" -------------
	var resultId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "resultId", c.Param("resultId"), &resultId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resultId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetResult(c, gameId, resultId)
}

// UpdateResult operation middleware
func (siw *ServerInterfaceWrapper) UpdateResult(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "resultId" -------------
	var resultId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "resultId", c.Param("resultId"), &resultId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resultId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateResult(c, gameId, resultId)
}

// GetScoreboard operation middleware
func (siw *ServerInterfaceWrapper) GetScoreboard(c *gin.Context) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", c.Param("gameId"), &gameId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gameId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetScoreboard(c, gameId)
}

// ListServices operation middleware
func (siw *ServerInterfaceWrapper) ListServices(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListServices(c)
}

// CreateService operation middleware
func (siw *ServerInterfaceWrapper) CreateService(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateService(c)
}

// DeleteService operation middleware
func (siw *ServerInterfaceWrapper) DeleteService(c *gin.Context) {

	var err error

	// ------------- Path parameter "serviceId" -------------
	var serviceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "serviceId", c.Param("serviceId"), &serviceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter serviceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteService(c, serviceId)
}

// GetServiceById operation middleware
func (siw *ServerInterfaceWrapper) GetServiceById(c *gin.Context) {

	var err error

	// ------------- Path parameter "serviceId" -------------
	var serviceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "serviceId", c.Param("serviceId"), &serviceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter serviceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceById(c, serviceId)
}

// UpdateService operation middleware
func (siw *ServerInterfaceWrapper) UpdateService(c *gin.Context) {

	var err error

	// ------------- Path parameter "serviceId" -------------
	var serviceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "serviceId", c.Param("serviceId"), &serviceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter serviceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateService(c, serviceId)
}

// UploadChecker operation middleware
func (siw *ServerInterfaceWrapper) UploadChecker(c *gin.Context) {

	var err error

	// ------------- Path parameter "serviceId" -------------
	var serviceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "serviceId", c.Param("serviceId"), &serviceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter serviceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UploadChecker(c, serviceId)
}

// UploadService operation middleware
func (siw *ServerInterfaceWrapper) UploadService(c *gin.Context) {

	var err error

	// ------------- Path parameter "serviceId" -------------
	var serviceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "serviceId", c.Param("serviceId"), &serviceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter serviceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UploadService(c, serviceId)
}

// ListTeams operation middleware
func (siw *ServerInterfaceWrapper) ListTeams(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTeams(c)
}

// CreateTeam operation middleware
func (siw *ServerInterfaceWrapper) CreateTeam(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTeam(c)
}

// DeleteTeam operation middleware
func (siw *ServerInterfaceWrapper) DeleteTeam(c *gin.Context) {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Param("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter teamId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTeam(c, teamId)
}

// GetTeamById operation middleware
func (siw *ServerInterfaceWrapper) GetTeamById(c *gin.Context) {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Param("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter teamId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTeamById(c, teamId)
}

// UpdateTeam operation middleware
func (siw *ServerInterfaceWrapper) UpdateTeam(c *gin.Context) {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Param("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter teamId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTeam(c, teamId)
}

// TeamMembers operation middleware
func (siw *ServerInterfaceWrapper) TeamMembers(c *gin.Context) {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Param("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter teamId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TeamMembers(c, teamId)
}

// LeaveUserFromTeam operation middleware
func (siw *ServerInterfaceWrapper) LeaveUserFromTeam(c *gin.Context) {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Param("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter teamId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LeaveUserFromTeam(c, teamId, userId)
}

// ConnectUserTeam operation middleware
func (siw *ServerInterfaceWrapper) ConnectUserTeam(c *gin.Context) {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Param("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter teamId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ConnectUserTeam(c, teamId, userId)
}

// ApproveUserTeam operation middleware
func (siw *ServerInterfaceWrapper) ApproveUserTeam(c *gin.Context) {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Param("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter teamId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ApproveUserTeam(c, teamId, userId)
}

// ListUniversities operation middleware
func (siw *ServerInterfaceWrapper) ListUniversities(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUniversitiesParams

	// ------------- Optional query parameter "term" -------------

	err = runtime.BindQueryParameter("form", true, false, "term", c.Request.URL.Query(), &params.Term)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter term: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUniversities(c, params)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUsers(c)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUser(c, userId)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserById(c, userId)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c, userId)
}

// GetProfileById operation middleware
func (siw *ServerInterfaceWrapper) GetProfileById(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfileById(c, userId)
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetVersion(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/auth/session", wrapper.ValidateSession)
	router.POST(options.BaseURL+"/api/v1/auth/sign_in", wrapper.SignInUser)
	router.POST(options.BaseURL+"/api/v1/auth/sign_out", wrapper.SignOutUser)
	router.GET(options.BaseURL+"/api/v1/avatar/:username", wrapper.UniqueAvatar)
	router.GET(options.BaseURL+"/api/v1/games", wrapper.ListGames)
	router.POST(options.BaseURL+"/api/v1/games", wrapper.CreateGame)
	router.DELETE(options.BaseURL+"/api/v1/games/:gameId", wrapper.DeleteGame)
	router.GET(options.BaseURL+"/api/v1/games/:gameId", wrapper.GetGameById)
	router.PUT(options.BaseURL+"/api/v1/games/:gameId", wrapper.UpdateGame)
	router.POST(options.BaseURL+"/api/v1/games/:gameId/results", wrapper.CreateResult)
	router.GET(options.BaseURL+"/api/v1/games/:gameId/results/:resultId", wrapper.GetResult)
	router.PUT(options.BaseURL+"/api/v1/games/:gameId/results/:resultId", wrapper.UpdateResult)
	router.GET(options.BaseURL+"/api/v1/games/:gameId/scoreboard", wrapper.GetScoreboard)
	router.GET(options.BaseURL+"/api/v1/services", wrapper.ListServices)
	router.POST(options.BaseURL+"/api/v1/services", wrapper.CreateService)
	router.DELETE(options.BaseURL+"/api/v1/services/:serviceId", wrapper.DeleteService)
	router.GET(options.BaseURL+"/api/v1/services/:serviceId", wrapper.GetServiceById)
	router.PUT(options.BaseURL+"/api/v1/services/:serviceId", wrapper.UpdateService)
	router.POST(options.BaseURL+"/api/v1/services/:serviceId/checker", wrapper.UploadChecker)
	router.POST(options.BaseURL+"/api/v1/services/:serviceId/service", wrapper.UploadService)
	router.GET(options.BaseURL+"/api/v1/teams", wrapper.ListTeams)
	router.POST(options.BaseURL+"/api/v1/teams", wrapper.CreateTeam)
	router.DELETE(options.BaseURL+"/api/v1/teams/:teamId", wrapper.DeleteTeam)
	router.GET(options.BaseURL+"/api/v1/teams/:teamId", wrapper.GetTeamById)
	router.PUT(options.BaseURL+"/api/v1/teams/:teamId", wrapper.UpdateTeam)
	router.GET(options.BaseURL+"/api/v1/teams/:teamId/members", wrapper.TeamMembers)
	router.DELETE(options.BaseURL+"/api/v1/teams/:teamId/members/:userId", wrapper.LeaveUserFromTeam)
	router.POST(options.BaseURL+"/api/v1/teams/:teamId/members/:userId", wrapper.ConnectUserTeam)
	router.PUT(options.BaseURL+"/api/v1/teams/:teamId/members/:userId", wrapper.ApproveUserTeam)
	router.GET(options.BaseURL+"/api/v1/universities", wrapper.ListUniversities)
	router.GET(options.BaseURL+"/api/v1/users", wrapper.ListUsers)
	router.POST(options.BaseURL+"/api/v1/users", wrapper.CreateUser)
	router.DELETE(options.BaseURL+"/api/v1/users/:userId", wrapper.DeleteUser)
	router.GET(options.BaseURL+"/api/v1/users/:userId", wrapper.GetUserById)
	router.PUT(options.BaseURL+"/api/v1/users/:userId", wrapper.UpdateUser)
	router.GET(options.BaseURL+"/api/v1/users/:userId/profile", wrapper.GetProfileById)
	router.GET(options.BaseURL+"/api/version", wrapper.GetVersion)
}
